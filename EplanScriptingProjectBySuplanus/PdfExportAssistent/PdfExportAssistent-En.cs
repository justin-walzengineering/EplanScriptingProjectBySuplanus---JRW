// PDF-Export Assistant, Version 1.0.0, vom 07.02.2014
//
// Integriert einen Dialog um automatisiert PDF-Dateien in definierte Folder abzulegen.
// Der Aufruf erfolgt entweder über Menüpunkt (unter Seite > Export > PDF (Assistant)...)
// oder automatisch beim Schließen oder Beenden.
//
// Der Ursprung für diesen Assistanten war das Skript "PDFbyProjectClose"
//
// Copyright by Frank Schöneck, 2014
// letzte Änderung: Frank Schöneck, 27.01.2014 V1.0.0, Projectbeginn
//
// für Eplan Electric P8, ab V2.2
//

// PDF-Export Assistant, Version 1.0.0, dated 07.02.2014
//
// Integrates a dialog to automatically save PDF files into defined folders.
// The call is either made via menu item (under Page> Export> PDF (Assistant) ...)
// or automatically when closing or exiting.
//
// The origin for this assistant was the script "PDFbyProjectClose"
//
// Copyright by Frank Schöneck, 2014
// last change: Frank Schöneck, 27.01.2014 V1.0.0, start of project
//
// for Eplan Electric P8, from V2.2
//

using System;
using System.Windows.Forms;
using System.Xml;
using Eplan.EplApi.Scripting;
using Eplan.EplApi.ApplicationFramework;
using Eplan.EplApi.Base;
using Eplan.EplApi.Gui;

public partial class frmPDFAssistant : System.Windows.Forms.Form
{
	private Button btnAbort;
	private Button btnOK;
	private CheckBox chkSaveSettings;
	private TabControl tabControl1;
	private TabPage tabPage1;
	private Button btnFolderSelection;
	private TextBox txtLocation;
	private TextBox txtFilename;
	private CheckBox chkDateStamp;
	private CheckBox chkTimeStamp;
	private ComboBox cboEditionAfter;
	private Label label3;
	private Label label2;
	private Label label1;
	private TabPage tabPage2;
	private GroupBox groupBox1;
	private CheckBox chkByEplanEnd;
	private CheckBox chkByProjectClose;
	private Label label4;
	private CheckBox chkWithoutDemand;
	private Button btnSave;
	private Button button1;
	private GroupBox groupBox2;
	private Button btnProjectFolderSelection;
	private TextBox txtProjectSavedInFolder;
	private CheckBox chkIstInProjectFolder;

    #region Code generated by Windows Form Designer

    // <summary>
    // Required designer variable.
    // </summary>
    private System.ComponentModel.IContainer components = null;

    // <summary>
    // Purge used resources.
    // </ summary>
    // <param name = "disposing"> True, if managed resources
    // should be deleted; otherwise False. </ param>
    protected override void Dispose(bool disposing)
	{
		if (disposing && (components != null))
		{
			components.Dispose();
		}
		base.Dispose(disposing);
	}

    // <summary>
    // Required method for designer support.
    // The content of the method must not be used with the code editor
    // to be changed.
    // </ summary>
    private void InitializeComponent()
	{
            this.btnAbort = new System.Windows.Forms.Button();
            this.btnOK = new System.Windows.Forms.Button();
            this.chkSaveSettings = new System.Windows.Forms.CheckBox();
            this.tabControl1 = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.btnFolderSelection = new System.Windows.Forms.Button();
            this.txtLocation = new System.Windows.Forms.TextBox();
            this.txtFilename = new System.Windows.Forms.TextBox();
            this.chkDateStamp = new System.Windows.Forms.CheckBox();
            this.chkTimeStamp = new System.Windows.Forms.CheckBox();
            this.cboEditionAfter = new System.Windows.Forms.ComboBox();
            this.label4 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.btnProjectFolderSelection = new System.Windows.Forms.Button();
            this.txtProjectSavedInFolder = new System.Windows.Forms.TextBox();
            this.chkIstInProjectFolder = new System.Windows.Forms.CheckBox();
            this.chkWithoutDemand = new System.Windows.Forms.CheckBox();
            this.btnSave = new System.Windows.Forms.Button();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.chkByEplanEnd = new System.Windows.Forms.CheckBox();
            this.chkByProjectClose = new System.Windows.Forms.CheckBox();
            this.button1 = new System.Windows.Forms.Button();
            this.tabControl1.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.groupBox2.SuspendLayout();
            this.groupBox1.SuspendLayout();
            this.SuspendLayout();
            // 
            // btnAbort
            // 
            this.btnAbort.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.btnAbort.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btnAbort.Location = new System.Drawing.Point(408, 273);
            this.btnAbort.Name = "btnAbort";
            this.btnAbort.Size = new System.Drawing.Size(95, 24);
            this.btnAbort.TabIndex = 0;
            this.btnAbort.Text = "Abort";
            this.btnAbort.UseVisualStyleBackColor = true;
            this.btnAbort.Click += new System.EventHandler(this.btnAbort_Click);
            // 
            // btnOK
            // 
            this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.btnOK.Location = new System.Drawing.Point(298, 273);
            this.btnOK.Name = "btnOK";
            this.btnOK.Size = new System.Drawing.Size(95, 24);
            this.btnOK.TabIndex = 0;
            this.btnOK.Text = "OK";
            this.btnOK.UseVisualStyleBackColor = true;
            this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
            // 
            // chkSaveSettings
            // 
            this.chkSaveSettings.AutoSize = true;
            this.chkSaveSettings.Location = new System.Drawing.Point(9, 278);
            this.chkSaveSettings.Name = "chkSaveSettings";
            this.chkSaveSettings.Size = new System.Drawing.Size(92, 17);
            this.chkSaveSettings.TabIndex = 3;
            this.chkSaveSettings.Text = "Settings Save";
            this.chkSaveSettings.UseVisualStyleBackColor = true;
            // 
            // tabControl1
            // 
            this.tabControl1.Controls.Add(this.tabPage1);
            this.tabControl1.Controls.Add(this.tabPage2);
            this.tabControl1.Location = new System.Drawing.Point(9, 12);
            this.tabControl1.Name = "tabControl1";
            this.tabControl1.SelectedIndex = 0;
            this.tabControl1.Size = new System.Drawing.Size(498, 235);
            this.tabControl1.TabIndex = 4;
            // 
            // tabPage1
            // 
            this.tabPage1.BackColor = System.Drawing.Color.Transparent;
            this.tabPage1.Controls.Add(this.btnFolderSelection);
            this.tabPage1.Controls.Add(this.txtLocation);
            this.tabPage1.Controls.Add(this.txtFilename);
            this.tabPage1.Controls.Add(this.chkDateStamp);
            this.tabPage1.Controls.Add(this.chkTimeStamp);
            this.tabPage1.Controls.Add(this.cboEditionAfter);
            this.tabPage1.Controls.Add(this.label4);
            this.tabPage1.Controls.Add(this.label3);
            this.tabPage1.Controls.Add(this.label2);
            this.tabPage1.Controls.Add(this.label1);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(490, 209);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Output";
            // 
            // btnFolderSelection
            // 
            this.btnFolderSelection.Location = new System.Drawing.Point(444, 148);
            this.btnFolderSelection.Name = "btnFolderSelection";
            this.btnFolderSelection.Size = new System.Drawing.Size(28, 20);
            this.btnFolderSelection.TabIndex = 15;
            this.btnFolderSelection.Text = "...";
            this.btnFolderSelection.UseVisualStyleBackColor = true;
            this.btnFolderSelection.Click += new System.EventHandler(this.btnFolderSelection_Click);
            // 
            // txtLocation
            // 
            this.txtLocation.Location = new System.Drawing.Point(14, 149);
            this.txtLocation.Name = "txtLocation";
            this.txtLocation.ReadOnly = true;
            this.txtLocation.Size = new System.Drawing.Size(424, 20);
            this.txtLocation.TabIndex = 13;
            // 
            // txtFilename
            // 
            this.txtFilename.Location = new System.Drawing.Point(14, 110);
            this.txtFilename.Name = "txtFilename";
            this.txtFilename.Size = new System.Drawing.Size(458, 20);
            this.txtFilename.TabIndex = 14;
            // 
            // chkDateStamp
            // 
            this.chkDateStamp.AutoSize = true;
            this.chkDateStamp.Location = new System.Drawing.Point(174, 54);
            this.chkDateStamp.Name = "chkDateStamp";
            this.chkDateStamp.Size = new System.Drawing.Size(82, 17);
            this.chkDateStamp.TabIndex = 12;
            this.chkDateStamp.Text = "Date-Stamp";
            this.chkDateStamp.UseVisualStyleBackColor = true;
            this.chkDateStamp.CheckedChanged += new System.EventHandler(this.chkDateStamp_CheckedChanged);
            // 
            // chkTimeStamp
            // 
            this.chkTimeStamp.AutoSize = true;
            this.chkTimeStamp.Location = new System.Drawing.Point(278, 54);
            this.chkTimeStamp.Name = "chkTimeStamp";
            this.chkTimeStamp.Size = new System.Drawing.Size(82, 17);
            this.chkTimeStamp.TabIndex = 11;
            this.chkTimeStamp.Text = "Time-Stamp";
            this.chkTimeStamp.UseVisualStyleBackColor = true;
            this.chkTimeStamp.CheckedChanged += new System.EventHandler(this.chkTimeStamp_CheckedChanged);
            // 
            // cboEditionAfter
            // 
            this.cboEditionAfter.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cboEditionAfter.Items.AddRange(new object[] {
            "In the Project-Folder",
            "Output directory of Settings: PDF-Export",
            "In the Folder A level about that Project-Folder",
            "in Folder \"Own Files\"",
            "on the Desktop",
            "save Path as Project only on another drive"});
            this.cboEditionAfter.Location = new System.Drawing.Point(96, 17);
            this.cboEditionAfter.Name = "cboEditionAfter";
            this.cboEditionAfter.Size = new System.Drawing.Size(376, 21);
            this.cboEditionAfter.TabIndex = 10;
            this.cboEditionAfter.SelectedIndexChanged += new System.EventHandler(this.cboEditionAfter_SelectedIndexChanged);
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(11, 55);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(124, 13);
            this.label4.TabIndex = 7;
            this.label4.Text = "PDF-Expand filename at:";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(11, 94);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(194, 13);
            this.label3.TabIndex = 7;
            this.label3.Text = "PDF-Filename (without extension (.pdf)):";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(11, 133);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(51, 13);
            this.label2.TabIndex = 8;
            this.label2.Text = "Location:";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(11, 20);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(16, 13);
            this.label1.TabIndex = 9;
            this.label1.Text = "a:";
            this.label1.Click += new System.EventHandler(this.label1_Click);
            // 
            // tabPage2
            // 
            this.tabPage2.BackColor = System.Drawing.Color.Transparent;
            this.tabPage2.Controls.Add(this.groupBox2);
            this.tabPage2.Controls.Add(this.btnSave);
            this.tabPage2.Controls.Add(this.groupBox1);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(490, 209);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "Settings";
            // 
            // groupBox2
            // 
            this.groupBox2.Controls.Add(this.btnProjectFolderSelection);
            this.groupBox2.Controls.Add(this.txtProjectSavedInFolder);
            this.groupBox2.Controls.Add(this.chkIstInProjectFolder);
            this.groupBox2.Controls.Add(this.chkWithoutDemand);
            this.groupBox2.Location = new System.Drawing.Point(6, 96);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(478, 77);
            this.groupBox2.TabIndex = 5;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "and additional conditions are met";
            // 
            // btnProjectFolderSelection
            // 
            this.btnProjectFolderSelection.Location = new System.Drawing.Point(442, 17);
            this.btnProjectFolderSelection.Name = "btnProjectFolderSelection";
            this.btnProjectFolderSelection.Size = new System.Drawing.Size(28, 20);
            this.btnProjectFolderSelection.TabIndex = 16;
            this.btnProjectFolderSelection.Text = "...";
            this.btnProjectFolderSelection.UseVisualStyleBackColor = true;
            this.btnProjectFolderSelection.Click += new System.EventHandler(this.btnProjectFolderSelection_Click);
            // 
            // txtProjectSavedInFolder
            // 
            this.txtProjectSavedInFolder.Location = new System.Drawing.Point(206, 17);
            this.txtProjectSavedInFolder.Name = "txtProjectSavedInFolder";
            this.txtProjectSavedInFolder.Size = new System.Drawing.Size(230, 20);
            this.txtProjectSavedInFolder.TabIndex = 5;
            // 
            // chkIstInProjectFolder
            // 
            this.chkIstInProjectFolder.AutoSize = true;
            this.chkIstInProjectFolder.Location = new System.Drawing.Point(17, 19);
            this.chkIstInProjectFolder.Name = "chkIstInProjectFolder";
            this.chkIstInProjectFolder.Size = new System.Drawing.Size(136, 17);
            this.chkIstInProjectFolder.TabIndex = 3;
            this.chkIstInProjectFolder.Text = "if Project is in this folder";
            this.chkIstInProjectFolder.UseVisualStyleBackColor = true;
            this.chkIstInProjectFolder.CheckedChanged += new System.EventHandler(this.chkIstInProjectFolder_CheckedChanged);
            // 
            // chkWithoutDemand
            // 
            this.chkWithoutDemand.AutoSize = true;
            this.chkWithoutDemand.Location = new System.Drawing.Point(17, 54);
            this.chkWithoutDemand.Name = "chkWithoutDemand";
            this.chkWithoutDemand.Size = new System.Drawing.Size(143, 17);
            this.chkWithoutDemand.TabIndex = 4;
            this.chkWithoutDemand.Text = "directly (without demand)";
            this.chkWithoutDemand.UseVisualStyleBackColor = true;
            // 
            // btnSave
            // 
            this.btnSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.btnSave.Location = new System.Drawing.Point(389, 179);
            this.btnSave.Name = "btnSave";
            this.btnSave.Size = new System.Drawing.Size(95, 24);
            this.btnSave.TabIndex = 2;
            this.btnSave.Text = "Save";
            this.btnSave.UseVisualStyleBackColor = true;
            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
            // 
            // groupBox1
            // 
            this.groupBox1.BackColor = System.Drawing.Color.Transparent;
            this.groupBox1.Controls.Add(this.chkByEplanEnd);
            this.groupBox1.Controls.Add(this.chkByProjectClose);
            this.groupBox1.Location = new System.Drawing.Point(6, 19);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(478, 71);
            this.groupBox1.TabIndex = 1;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Run only";
            // 
            // chkByEplanEnd
            // 
            this.chkByEplanEnd.AutoSize = true;
            this.chkByEplanEnd.Location = new System.Drawing.Point(17, 43);
            this.chkByEplanEnd.Name = "chkByEplanEnd";
            this.chkByEplanEnd.Size = new System.Drawing.Size(125, 17);
            this.chkByEplanEnd.TabIndex = 2;
            this.chkByEplanEnd.Text = "when Eplan is ended";
            this.chkByEplanEnd.UseVisualStyleBackColor = true;
            // 
            // chkByProjectClose
            // 
            this.chkByProjectClose.AutoSize = true;
            this.chkByProjectClose.Location = new System.Drawing.Point(17, 20);
            this.chkByProjectClose.Name = "chkByProjectClose";
            this.chkByProjectClose.Size = new System.Drawing.Size(132, 17);
            this.chkByProjectClose.TabIndex = 1;
            this.chkByProjectClose.Text = "when Project is closed";
            this.chkByProjectClose.UseVisualStyleBackColor = true;
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(166, 260);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(101, 35);
            this.button1.TabIndex = 3;
            this.button1.Text = "button1";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Visible = false;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // frmPDFAssistant
            // 
            this.AcceptButton = this.btnOK;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.CancelButton = this.btnAbort;
            this.ClientSize = new System.Drawing.Size(519, 309);
            this.Controls.Add(this.button1);
            this.Controls.Add(this.tabControl1);
            this.Controls.Add(this.chkSaveSettings);
            this.Controls.Add(this.btnOK);
            this.Controls.Add(this.btnAbort);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "frmPDFAssistant";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "PDF-Export (Assistant)";
            this.Load += new System.EventHandler(this.frmPDFAssistant_Load);
            this.tabControl1.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.tabPage1.PerformLayout();
            this.tabPage2.ResumeLayout(false);
            this.groupBox2.ResumeLayout(false);
            this.groupBox2.PerformLayout();
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

	}

	public frmPDFAssistant()
	{
		InitializeComponent();
	}

    #endregion

    //Create menu item
    [DeclareMenu()]
	public void PDFAssistant_Menu()
	{
        //Menu item

        Eplan.EplApi.Gui.Menu oMenu = new Eplan.EplApi.Gui.Menu();
		oMenu.AddMenuItem("PDF (Assistant)...", "PDFAssistant_Start", "PDF Assistant, Export the current project as a PDF file", 35287, 1, false, false);
	}

    //Intercept event ProjectClose
        [DeclareEventHandler("onActionStart.String.XPrjActionProjectClose")]
	public void Project_Close_Event()
	{
        //Read in setting
        Eplan.EplApi.Base.Settings oSettings = new Eplan.EplApi.Base.Settings();
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ByProjectClose"))
		{
			bool bChecked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.ByProjectClose", 1);
			if (bChecked) //Run at ProjectClose
            {
				PDFAssistant_SollStarten();
			}
		}
		return;
	}

    //Intercept Event Eplan End
        [DeclareEventHandler("Eplan.EplApi.OnMainEnd")]
	public void Eplan_End_Event()
	{
        //Read in setting
        Eplan.EplApi.Base.Settings oSettings = new Eplan.EplApi.Base.Settings();
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ByEplanEnd"))
		{
			bool bChecked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.ByEplanEnd", 1);
			if (bChecked) //Run at EplanEnd
            {
				PDFAssistant_SollStarten();
			}
		}
		return;
	}

    //Check if Assistant should be started
    public void PDFAssistant_SollStarten()
	{
		Eplan.EplApi.Base.Settings oSettings = new Eplan.EplApi.Base.Settings();

        // is project in project folder
        // If ticked then Project has to be in Folder for Assistant, otherwise no Assistant
        // If not ticked then Assistant
        if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.WithoutDemand"))
		{
			bool bChecked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolder", 1);
			string sProjectInFolder = oSettings.GetStringSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolderName", 0);
			if (bChecked)
			{
				string sProjectFolder = PathMap.SubstitutePath("$(PROJECTPATH)");
				sProjectFolder = sProjectFolder.Substring(0, sProjectFolder.LastIndexOf(@"\"));
				if (!sProjectFolder.EndsWith(@"\"))
				{
					sProjectFolder += @"\";
				}
				if (sProjectInFolder == sProjectFolder) //here maybe even expand on all subfolders(InString ?)

                {
					PDFAssistant_ausführen();
				}
				else
				{
					Close();
				}
			}
			else
			{
				PDFAssistant_ausführen();
			}
		}
	}

    //Execute Assistant without dialog directly (execute without request)
    public void PDFAssistant_ausführen()
	{
		Eplan.EplApi.Base.Settings oSettings = new Eplan.EplApi.Base.Settings();
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.WithoutDemand"))
		{
			bool bChecked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.WithoutDemand", 1);
			if (bChecked)
			{
				cboEditionAfter.SelectedIndex = 0;
				ReadSettings();
				PDFexport(txtLocation.Text + txtFilename.Text + @".pdf");
				Close();
			}
			else
			{
				PDFAssistant_Start();
			}
		}
	}

    //Start Assistant Form
    [DeclareAction("PDFAssistant_Start")]
	public void PDFAssistant_Start()
	{
		frmPDFAssistant frm = new frmPDFAssistant();
		frm.ShowDialog();
		return;
	}

    //Form is loading
    private void frmPDFAssistant_Load(object sender, EventArgs e)
	{
		//Issue after einstellen
		cboEditionAfter.SelectedIndex = 0;
		chkIstInProjectFolder.CheckState = CheckState.Unchecked;
		txtProjectSavedInFolder.Enabled = false;
		btnProjectFolderSelection.Enabled = false; 
		ReadSettings();
	}

	//Button: Abort
	private void btnAbort_Click(object sender, System.EventArgs e)
	{
		Close();
	}

	//Button: OK
	private void btnOK_Click(object sender, System.EventArgs e)
	{
		if (txtFilename.Text != string.Empty)
		{
			PDFexport(txtLocation.Text + txtFilename.Text + @".pdf");
		}
		WriteSettings();
		Close();
	}

    //Issue after has changed
    private void cboEditionAfter_SelectedIndexChanged(object sender, EventArgs e)
	{
#if !DEBUG
        string sProjectFolder = PathMap.SubstitutePath("$(PROJECTPATH)");
        string sFilename = PathMap.SubstitutePath("$(PROJECTNAME)");
#else
		string sProjectFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
		string sFilename = "TEST";
#endif
		string sAusgabeFolder = sProjectFolder;

		switch (cboEditionAfter.SelectedIndex)
		{
			case 0: //In the Project-Folder
				sAusgabeFolder = sProjectFolder;
				break;

			case 1: //Output directory of Settings: PDF-Export
#if !DEBUG
				Eplan.EplApi.Base.Settings oSettings = new Eplan.EplApi.Base.Settings();
				string sLastSchema = string.Empty;
				if (oSettings.ExistSetting("USER.PDFExportGUI.SCHEMAS.LastUsed"))
				{
					sLastSchema = oSettings.GetStringSetting("USER.PDFExportGUI.SCHEMAS.LastUsed", 0);
				}
				if (oSettings.ExistSetting("USER.PDFExportGUI.SCHEMAS.Steinert.Data.TargetPath"))
				{
					sAusgabeFolder = oSettings.GetStringSetting("USER.PDFExportGUI.SCHEMAS." + sLastSchema + ".Data.TargetPath", 0);
				}
#endif
				break;

			case 2: //In the Folder A level about that Project-Folder
				sAusgabeFolder = sProjectFolder.Substring(0, sProjectFolder.LastIndexOf(@"\"));
				break;

			case 3: //in Folder "Own Files"
				sAusgabeFolder = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
				break;

			case 4: //on the Desktop
				sAusgabeFolder = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
				break;

			case 5: //save Path as Project only on another drive
				sAusgabeFolder = sProjectFolder.Substring(0, sProjectFolder.LastIndexOf(@"\"));	//In the Folder A level about that Project-Folder
				sAusgabeFolder = sAusgabeFolder.Replace("C:", "D:");    //Adjust here which drive letters are used.
                break;

			default:
				MessageBox.Show("Selection:default");
				break;
		}

        //Add dates stamp
        if (chkDateStamp.Checked)
		{
			sFilename += "_" + DateTime.Now.ToString("yyyyMMdd");
		}

        //Add TimeStamp
        if (chkTimeStamp.Checked)
		{
			sFilename += "-" + DateTime.Now.ToString("HHmmss"); ;
		}

        //Ends with \ ?
        if (!sAusgabeFolder.EndsWith(@"\"))
		{
			sAusgabeFolder += @"\";
		}

		txtFilename.Text = sFilename;
		txtLocation.Text = sAusgabeFolder;
	}

    //DateStamp status has changed
    private void chkDateStamp_CheckedChanged(object sender, EventArgs e)
	{
		cboEditionAfter_SelectedIndexChanged(sender, e);
	}

    //TimeStamp condition has changed

    private void chkTimeStamp_CheckedChanged(object sender, EventArgs e)
	{
		cboEditionAfter_SelectedIndexChanged(sender, e);
	}

    //Output entire project as a PDF
    public void PDFexport(string sZielDatei)
	{
        //Progressive on
        Eplan.EplApi.Base.Progress oProgress = new Eplan.EplApi.Base.Progress("SimpleProgress");
		oProgress.ShowImmediately();

		ActionCallingContext pdfContext = new ActionCallingContext();
		pdfContext.AddParameter("type", "PDFPROJECTSCHEME"); //PDFPROJECTSCHEME = Export project in PDF format
		pdfContext.AddParameter("exportscheme", "NAME_SCHEMA"); //used scheme
        pdfContext.AddParameter("exportfile", sZielDatei); //Name export.Project, default value: Projectname
        pdfContext.AddParameter("exportmodel", "0"); //0 = do not spend any models
        pdfContext.AddParameter("blackwhite", "1"); //1 = PDF turns black and white
        pdfContext.AddParameter("useprintmargins", "1"); //1 = use printing margins
        pdfContext.AddParameter("readonlyexport", "2"); //1 = PDF becomes read - only
        pdfContext.AddParameter("usesimplelink", "1"); //1 = simple jump function
        pdfContext.AddParameter("usezoomlevel", "1"); //Jump in navigation pages
        pdfContext.AddParameter("fastwebview", "1"); //1 = fast web ad
        pdfContext.AddParameter("zoomlevel", "1"); //if USEZOOMLEVEL to 1 then here zoom level in mm

                CommandLineInterpreter cmdLineItp = new CommandLineInterpreter();
		cmdLineItp.Execute("export", pdfContext);

        //Progressbar off
        oProgress.EndPart(true);

		return;
	}

	//Settings Save
	public void WriteSettings()
	{
		Eplan.EplApi.Base.Settings oSettings = new Eplan.EplApi.Base.Settings();

		//Settings Save
		if (!oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.SaveSettings"))
		{
			oSettings.AddBoolSetting("USER.SCRIPTS.PDF_Assistant.SaveSettings",
				new bool[] { false },
				"SaveSettings Info",
				new bool[] { false },
				ISettings.CreationFlag.Insert);
		}
		oSettings.SetBoolSetting("USER.SCRIPTS.PDF_Assistant.SaveSettings", chkSaveSettings.Checked, 1); //1 = Visible = True

        //Only save if desired
        if (chkSaveSettings.Checked)
		{

            //Close PDF on Project
            if (!oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ByProjectClose"))
			{
				oSettings.AddBoolSetting("USER.SCRIPTS.PDF_Assistant.ByProjectClose",
					new bool[] { false },
					"Dates stamp Save",
					new bool[] { false },
					ISettings.CreationFlag.Insert);
			}
			oSettings.SetBoolSetting("USER.SCRIPTS.PDF_Assistant.ByProjectClose", chkByProjectClose.Checked, 1); //1 = Visible = True

            //Exit PDF at Eplan
            if (!oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ByEplanEnd"))
			{
				oSettings.AddBoolSetting("USER.SCRIPTS.PDF_Assistant.ByEplanEnd",
					new bool[] { false },
					"Dates stamp Save",
					new bool[] { false },
					ISettings.CreationFlag.Insert);
			}
			oSettings.SetBoolSetting("USER.SCRIPTS.PDF_Assistant.ByEplanEnd", chkByEplanEnd.Checked, 1); //1 = Visible = True

			//Issue after
			if (!oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.EditionAfter"))
			{
				oSettings.AddNumericSetting("USER.SCRIPTS.PDF_Assistant.EditionAfter",
					new int[] { 0 },
					new Range[] { new Range { FromValue = 0, ToValue = 32768 } },
					"Default value of test setting",
					new int[] { 0 },
					ISettings.CreationFlag.Insert);
			}
			oSettings.SetNumericSetting("USER.SCRIPTS.PDF_Assistant.EditionAfter", cboEditionAfter.SelectedIndex, 1); //1 = Visible = True

			oSettings.SetBoolSetting("USER.SCRIPTS.PDF_Assistant.ByEplanEnd", chkByEplanEnd.Checked, 1); //1 = Visible = True

            //Run without demand
            if (!oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.WithoutDemand"))
			{
				oSettings.AddBoolSetting("USER.SCRIPTS.PDF_Assistant.WithoutDemand",
					new bool[] { false },
					"Dates stamp Save",
					new bool[] { false },
					ISettings.CreationFlag.Insert);
			}
			oSettings.SetBoolSetting("USER.SCRIPTS.PDF_Assistant.WithoutDemand", chkWithoutDemand.Checked, 1); //1 = Visible = True

			//Dates stamp
			if (!oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.DateStamp"))
			{
				oSettings.AddBoolSetting("USER.SCRIPTS.PDF_Assistant.DateStamp",
					new bool[] { false },
					"Dates stamp Save",
					new bool[] { false },
					ISettings.CreationFlag.Insert);
			}
			oSettings.SetBoolSetting("USER.SCRIPTS.PDF_Assistant.DateStamp", chkDateStamp.Checked, 1); //1 = Visible = True

			//TimeStamp
			if (!oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.TimeStamp"))
			{
				oSettings.AddBoolSetting("USER.SCRIPTS.PDF_Assistant.TimeStamp",
					new bool[] { false },
					"TimeStamp Save",
					new bool[] { false },
					ISettings.CreationFlag.Insert);
			}
			oSettings.SetBoolSetting("USER.SCRIPTS.PDF_Assistant.TimeStamp", chkTimeStamp.Checked, 1); //1 = Visible = True

			//Project in Folder
			if (!oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolder"))
			{
				oSettings.AddBoolSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolder",
					new bool[] { false },
					"Project in Folder Save",
					new bool[] { false },
					ISettings.CreationFlag.Insert);
			}
			oSettings.SetBoolSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolder", chkIstInProjectFolder.Checked, 1); //1 = Visible = True

			if (!oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolderName"))
			{
				oSettings.AddStringSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolderName",
				new string[] { },
				new string[] { }, "test setting",
				new string[] { "Default value of test setting" },
				ISettings.CreationFlag.Insert);
			}
			oSettings.SetStringSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolderName", txtProjectSavedInFolder.Text, 0);
		}
	}

    //Settings read in
    public void ReadSettings()
	{
		Eplan.EplApi.Base.Settings oSettings = new Eplan.EplApi.Base.Settings();

		//ByProjectClose
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ByProjectClose"))
		{
			chkByProjectClose.Checked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.ByProjectClose", 1);
		}

		//ByEplanEnd
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ByEplanEnd"))
		{
			chkByEplanEnd.Checked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.ByEplanEnd", 1);
		}

        //Run without demand
        if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.WithoutDemand"))
		{
			chkWithoutDemand.Checked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.WithoutDemand", 1);
		}

		//Settings Save
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.SaveSettings"))
		{
			chkSaveSettings.Checked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.SaveSettings", 1);
		}

		//Dates stamp 
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.DateStamp"))
		{
			chkDateStamp.Checked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.DateStamp", 1);
		}

		//TimeStamp 
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.TimeStamp"))
		{
			chkTimeStamp.Checked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.TimeStamp", 1);
		}

		//Issue after
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.EditionAfter"))
		{
			cboEditionAfter.SelectedIndex = oSettings.GetNumericSetting("USER.SCRIPTS.PDF_Assistant.EditionAfter", 1);
		}

		//Project in Folder
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolder"))
		{
			chkIstInProjectFolder.Checked = oSettings.GetBoolSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolder", 1);
		}
		if (oSettings.ExistSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolderName"))
		{
			txtProjectSavedInFolder.Text = oSettings.GetStringSetting("USER.SCRIPTS.PDF_Assistant.ProjectInFolderName", 0);
		}
	}

    //Button: PDF Folder choose
    private void btnFolderSelection_Click(object sender, EventArgs e)
	{
		FolderBrowserDialog folderBrowserDialog1 = new FolderBrowserDialog();
		folderBrowserDialog1.SelectedPath = txtLocation.Text;
		folderBrowserDialog1.Description = "Select the destination folder in which the PDF file should be saved:";
		DialogResult result = folderBrowserDialog1.ShowDialog();
		if (result == DialogResult.OK)
		{
			string sLocation = folderBrowserDialog1.SelectedPath;
			if (!sLocation.EndsWith(@"\"))
			{
				sLocation += @"\";
			}
			txtLocation.Text = sLocation;
		}
	}

	//Button: Save
	private void btnSave_Click(object sender, EventArgs e)
	{
		WriteSettings();
	}

	//XML-Reader
	private static string ReadXml(string filename, int ID)
	{
		string strLastVersion = "";
		XmlTextReader reader = new XmlTextReader(filename);
		while (reader.Read())
		{
			if (reader.HasAttributes)
			{
				while (reader.MoveToNextAttribute())
				{
					if (reader.Name == "id")
					{
						if (reader.Value == ID.ToString())
						{
							strLastVersion = reader.ReadString();
							reader.Close();
							return strLastVersion;
						}
					}
				}
			}
		}
		return strLastVersion;
	}

	//Test-Button
	private void button1_Click(object sender, EventArgs e)
	{
		string filename = PathMap.SubstitutePath("$(PROJECTPATH)" + @"\" + "Projectinfo.xml");

		string LastVersion = ReadXml(filename, 10043);

		MessageBox.Show(
			"Last used EPLAN-Version:\n"
			+ LastVersion,
			"Information",
			MessageBoxButtons.OK,
			MessageBoxIcon.Information
			);

	}

    //Button: Project Folder choose
    private void btnProjectFolderSelection_Click(object sender, EventArgs e)
	{
		FolderBrowserDialog folderBrowserDialog1 = new FolderBrowserDialog();
		folderBrowserDialog1.SelectedPath = txtProjectSavedInFolder.Text;
		folderBrowserDialog1.Description = "Select the folder where the Project Saved must be:";
		DialogResult result = folderBrowserDialog1.ShowDialog();
		if (result == DialogResult.OK)
		{
			string sLocation = folderBrowserDialog1.SelectedPath;
			if (!sLocation.EndsWith(@"\"))
			{
				sLocation += @"\";
			}
			txtProjectSavedInFolder.Text = sLocation;
		}
	}

    //Is in Folder has changed
    private void chkIstInProjectFolder_CheckedChanged(object sender, EventArgs e)
	{
		if (chkIstInProjectFolder.Checked)
		{
			txtProjectSavedInFolder.Enabled = true;
			btnProjectFolderSelection.Enabled = true;
		}
		else
		{
			txtProjectSavedInFolder.Enabled = false;
			btnProjectFolderSelection.Enabled = false;
		}
	}
}